{"version":3,"file":"ourtree.repository-Bok29J5f.js","sources":["../../../Client/src/api/sdk.gen.ts","../../../Client/src/settingsTree/ourtree.data-source.ts","../../../Client/src/settingsTree/ourtree.repository.ts"],"sourcesContent":["// This file is auto-generated by @hey-api/openapi-ts\n\nimport type { Options as ClientOptions, TDataShape, Client } from './client';\nimport type { GetAncestorsData, GetAncestorsResponse, GetChildrenData, GetChildrenResponse, PingData, PingResponse, GetRootData, GetRootResponse } from './types.gen';\nimport { client as _heyApiClient } from './client.gen';\n\nexport type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {\n    /**\n     * You can provide a client instance returned by `createClient()` instead of\n     * individual options. This might be also useful if you want to implement a\n     * custom client.\n     */\n    client?: Client;\n    /**\n     * You can pass arbitrary values through the `meta` object. This can be\n     * used to access values that aren't defined as part of the SDK function.\n     */\n    meta?: Record<string, unknown>;\n};\n\nexport class UmbTreeClientService {\n    public static getAncestors<ThrowOnError extends boolean = true>(options?: Options<GetAncestorsData, ThrowOnError>) {\n        return (options?.client ?? _heyApiClient).get<GetAncestorsResponse, unknown, ThrowOnError>({\n            security: [\n                {\n                    scheme: 'bearer',\n                    type: 'http'\n                }\n            ],\n            url: '/umbraco/umbtreeclient/api/v1/Ancestors',\n            ...options\n        });\n    }\n    \n    public static getChildren<ThrowOnError extends boolean = true>(options?: Options<GetChildrenData, ThrowOnError>) {\n        return (options?.client ?? _heyApiClient).get<GetChildrenResponse, unknown, ThrowOnError>({\n            security: [\n                {\n                    scheme: 'bearer',\n                    type: 'http'\n                }\n            ],\n            url: '/umbraco/umbtreeclient/api/v1/Children',\n            ...options\n        });\n    }\n    \n    public static ping<ThrowOnError extends boolean = true>(options?: Options<PingData, ThrowOnError>) {\n        return (options?.client ?? _heyApiClient).get<PingResponse, unknown, ThrowOnError>({\n            security: [\n                {\n                    scheme: 'bearer',\n                    type: 'http'\n                }\n            ],\n            url: '/umbraco/umbtreeclient/api/v1/ping',\n            ...options\n        });\n    }\n    \n    public static getRoot<ThrowOnError extends boolean = true>(options?: Options<GetRootData, ThrowOnError>) {\n        return (options?.client ?? _heyApiClient).get<GetRootResponse, unknown, ThrowOnError>({\n            security: [\n                {\n                    scheme: 'bearer',\n                    type: 'http'\n                }\n            ],\n            url: '/umbraco/umbtreeclient/api/v1/root',\n            ...options\n        });\n    }\n    \n}","import { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\r\nimport {\r\n  UmbTreeAncestorsOfRequestArgs,\r\n  UmbTreeChildrenOfRequestArgs,\r\n  UmbTreeRootItemsRequestArgs,\r\n  UmbTreeServerDataSourceBase,\r\n} from \"@umbraco-cms/backoffice/tree\";\r\nimport { OurTreeItemResponseModel, UmbTreeClientService } from \"../api\";\r\nimport {\r\n  OUR_TREE_ITEM_ENTITY_TYPE,\r\n  OUR_TREE_ROOT_ENTITY_TYPE,\r\n  OurTreeItemModel,\r\n} from \"./types\";\r\n\r\nexport class OurTreeDataSource extends UmbTreeServerDataSourceBase<any, any> {\r\n  constructor(host: UmbControllerHost) {\r\n    super(host, {\r\n      getRootItems,\r\n      getChildrenOf,\r\n      getAncestorsOf,\r\n      mapper,\r\n    });\r\n  }\r\n}\r\n\r\nconst getAncestorsOf = async (args: UmbTreeAncestorsOfRequestArgs) => {\r\n  return await UmbTreeClientService.getAncestors({\r\n    query: { id: args.treeItem.unique },\r\n  });\r\n};\r\n\r\nconst getRootItems = async (args: UmbTreeRootItemsRequestArgs) =>\r\n  await UmbTreeClientService.getRoot({\r\n    query: { skip: args.skip, take: args.take },\r\n  });\r\n\r\nconst getChildrenOf = async (args: UmbTreeChildrenOfRequestArgs) => {\r\n  if (args.parent?.unique === null) {\r\n    return await getRootItems(args);\r\n  } else {\r\n    return await UmbTreeClientService.getChildren({\r\n      query: { parent: args.parent.unique },\r\n    });\r\n  }\r\n};\r\n\r\nconst mapper = (item: OurTreeItemResponseModel): OurTreeItemModel => {\r\n  return {\r\n    unique: item.id ?? \"\",\r\n    parent: { unique: \"\", entityType: OUR_TREE_ROOT_ENTITY_TYPE },\r\n    name: item.name ?? \"unknown\",\r\n    entityType: OUR_TREE_ITEM_ENTITY_TYPE,\r\n    hasChildren: item.hasChildren,\r\n    isFolder: false,\r\n    icon: item.icon ?? \"icon-bug\",\r\n  };\r\n};\r\n","import { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\r\nimport { UmbApi } from \"@umbraco-cms/backoffice/extension-api\";\r\nimport { UmbTreeRepositoryBase } from \"@umbraco-cms/backoffice/tree\";\r\nimport { OUR_TREE_STORE_CONTEXT } from \"./ourtree.store\";\r\nimport {\r\n  OUR_TREE_ROOT_ENTITY_TYPE,\r\n  OurTreeItemModel,\r\n  OurTreeRootModel,\r\n} from \"./types\";\r\nimport { OurTreeDataSource } from \"./ourtree.data-source\";\r\n\r\nexport class OurTreeRepository\r\n  extends UmbTreeRepositoryBase<OurTreeItemModel, OurTreeRootModel>\r\n  implements UmbApi\r\n{\r\n  constructor(host: UmbControllerHost) {\r\n    super(host, OurTreeDataSource, OUR_TREE_STORE_CONTEXT);\r\n  }\r\n\r\n  async requestTreeRoot() {\r\n    var data: OurTreeRootModel = {\r\n      unique: null,\r\n      entityType: OUR_TREE_ROOT_ENTITY_TYPE,\r\n      name: \"Our Tree Root\",\r\n      icon: \"icon-star\",\r\n      hasChildren: true,\r\n      isFolder: true,\r\n    };\r\n\r\n    return { data };\r\n  }\r\n}\r\n\r\nexport { OurTreeRepository as api };\r\n"],"names":["UmbTreeClientService","options","_heyApiClient","OurTreeDataSource","UmbTreeServerDataSourceBase","host","getRootItems","getChildrenOf","getAncestorsOf","mapper","args","_a","item","OUR_TREE_ROOT_ENTITY_TYPE","OUR_TREE_ITEM_ENTITY_TYPE","OurTreeRepository","UmbTreeRepositoryBase","OUR_TREE_STORE_CONTEXT","data"],"mappings":";;;;AAoBO,MAAMA,EAAqB;AAAA,EAC9B,OAAc,aAAkDC,GAAmD;AAC/G,aAAQA,KAAA,gBAAAA,EAAS,WAAUC,GAAe,IAAiD;AAAA,MACvF,UAAU;AAAA,QACN;AAAA,UACI,QAAQ;AAAA,UACR,MAAM;AAAA,QAAA;AAAA,MACV;AAAA,MAEJ,KAAK;AAAA,MACL,GAAGD;AAAA,IAAA,CACN;AAAA,EAAA;AAAA,EAGL,OAAc,YAAiDA,GAAkD;AAC7G,aAAQA,KAAA,gBAAAA,EAAS,WAAUC,GAAe,IAAgD;AAAA,MACtF,UAAU;AAAA,QACN;AAAA,UACI,QAAQ;AAAA,UACR,MAAM;AAAA,QAAA;AAAA,MACV;AAAA,MAEJ,KAAK;AAAA,MACL,GAAGD;AAAA,IAAA,CACN;AAAA,EAAA;AAAA,EAGL,OAAc,KAA0CA,GAA2C;AAC/F,aAAQA,KAAA,gBAAAA,EAAS,WAAUC,GAAe,IAAyC;AAAA,MAC/E,UAAU;AAAA,QACN;AAAA,UACI,QAAQ;AAAA,UACR,MAAM;AAAA,QAAA;AAAA,MACV;AAAA,MAEJ,KAAK;AAAA,MACL,GAAGD;AAAA,IAAA,CACN;AAAA,EAAA;AAAA,EAGL,OAAc,QAA6CA,GAA8C;AACrG,aAAQA,KAAA,gBAAAA,EAAS,WAAUC,GAAe,IAA4C;AAAA,MAClF,UAAU;AAAA,QACN;AAAA,UACI,QAAQ;AAAA,UACR,MAAM;AAAA,QAAA;AAAA,MACV;AAAA,MAEJ,KAAK;AAAA,MACL,GAAGD;AAAA,IAAA,CACN;AAAA,EAAA;AAGT;AC3DO,MAAME,UAA0BC,EAAsC;AAAA,EAC3E,YAAYC,GAAyB;AACnC,UAAMA,GAAM;AAAA,MACV,cAAAC;AAAA,MACA,eAAAC;AAAA,MACA,gBAAAC;AAAA,MACA,QAAAC;AAAA,IAAA,CACD;AAAA,EAAA;AAEL;AAEA,MAAMD,IAAiB,OAAOE,MACrB,MAAMV,EAAqB,aAAa;AAAA,EAC7C,OAAO,EAAE,IAAIU,EAAK,SAAS,OAAA;AAAO,CACnC,GAGGJ,IAAe,OAAOI,MAC1B,MAAMV,EAAqB,QAAQ;AAAA,EACjC,OAAO,EAAE,MAAMU,EAAK,MAAM,MAAMA,EAAK,KAAA;AACvC,CAAC,GAEGH,IAAgB,OAAOG,MAAuC;;AAClE,WAAIC,IAAAD,EAAK,WAAL,gBAAAC,EAAa,YAAW,OACnB,MAAML,EAAaI,CAAI,IAEvB,MAAMV,EAAqB,YAAY;AAAA,IAC5C,OAAO,EAAE,QAAQU,EAAK,OAAO,OAAA;AAAA,EAAO,CACrC;AAEL,GAEMD,IAAS,CAACG,OACP;AAAA,EACL,QAAQA,EAAK,MAAM;AAAA,EACnB,QAAQ,EAAE,QAAQ,IAAI,YAAYC,EAAA;AAAA,EAClC,MAAMD,EAAK,QAAQ;AAAA,EACnB,YAAYE;AAAA,EACZ,aAAaF,EAAK;AAAA,EAClB,UAAU;AAAA,EACV,MAAMA,EAAK,QAAQ;AAAA;AC3ChB,MAAMG,UACHC,EAEV;AAAA,EACE,YAAYX,GAAyB;AACnC,UAAMA,GAAMF,GAAmBc,CAAsB;AAAA,EAAA;AAAA,EAGvD,MAAM,kBAAkB;AACtB,QAAIC,IAAyB;AAAA,MAC3B,QAAQ;AAAA,MACR,YAAYL;AAAA,MACZ,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IAAA;AAGZ,WAAO,EAAE,MAAAK,EAAA;AAAA,EAAK;AAElB;"}